INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef4e1260>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52e7a0>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52e840>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52e8e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52e5c0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52f240>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52f380>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52efc0>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52f2e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52f560>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52ea20>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52ef20>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52e980>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52e700>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x733fef52f740>

INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22d11d00>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd225fbd80>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22efac00>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604040>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd226040e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604220>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604360>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604400>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604180>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604900>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604d60>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604cc0>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604720>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd226049a0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x78fd22604f40>

INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add39a75080>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add3997f920>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add3997f880>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add3997fa60>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add3997f740>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add3997fb00>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add3997fce0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add3a285940>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add3a285800>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add39994540>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add39994860>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add39994900>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add399949a0>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add39994720>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7add399942c0>

INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1ed9080>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1ddf920>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1ddf9c0>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1ddfa60>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1ddf740>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1ddf880>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1ddfce0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e26f5940>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e26f5800>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1df4860>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1df4900>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1df4a40>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1df49a0>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1df4680>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d9e1df42c0>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
INFO:openai._base_client:Retrying request to /chat/completions in 1.000000 seconds
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
INFO:openai._base_client:Retrying request to /chat/completions in 1.000000 seconds
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a867cd080>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866d3920>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866d3d80>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866d3a60>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866d3740>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866d3b00>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866d3ce0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a86fe5940>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a86fe5800>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866e8860>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866e8900>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866e8ae0>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866e8a40>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866e84a0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c5a866e82c0>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa206a7d1c0>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa206987a60>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa2069879c0>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa206987ba0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa206987880>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa206987c40>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa206987e20>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa20728da80>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa20728d940>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa20699cb80>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa20699c9a0>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa20699ca40>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa20699cae0>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa20699c720>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7fa20699c400>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366643cd120>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642d39c0>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642d3920>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642d3b00>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642d37e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642d3a60>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642d3ba0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642d3c40>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642d3e20>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642e8540>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642e8400>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642e89a0>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642e8ae0>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642e8680>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7366642e8360>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659ddf21120>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde2b9c0>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde2b920>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde2ba60>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde2b7e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde2bba0>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde2bd80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659de7319e0>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659de7318a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde40900>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde409a0>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde40ae0>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde40a40>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde407c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7659dde40360>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d89123d760>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a7f9c0>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a7fa60>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a7fb00>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a7f7e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a7f920>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a7fd80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d8913859e0>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d8913858a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a94900>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a949a0>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a94ae0>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a94a40>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a94400>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77d890a94360>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc9ad1080>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99d7920>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99d7880>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99d7a60>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99d7740>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99d7d80>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99d7ce0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bca2ed940>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bca2ed800>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99ec860>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99ec900>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99ecae0>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99eca40>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99ec4a0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x767bc99ec2c0>

INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555dcd080>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555cd7920>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555cd7880>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555cd7a60>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555cd7740>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555cd7b00>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555cd7ce0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7485565e9940>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7485565e9800>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555ce8540>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555ce8860>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555ce8900>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555ce89a0>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555ce8720>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x748555ce82c0>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece62ccfe0>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61d7880>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61d77e0>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61d79c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61d76a0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61d7a60>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61d7c40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece6ae98a0>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece6ae9760>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61ec4a0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61ec7c0>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61ec860>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61ec900>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61ec680>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75ece61ec220>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182acd5120>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abdb9c0>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abdba60>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abdb920>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abdb7e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abdbba0>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abdbd80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182b4f19e0>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182b4f18a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abf0900>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abf09a0>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abf0ae0>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abf0a40>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abf0720>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74182abf0360>

INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
INFO:openai._base_client:Retrying request to /chat/completions in 1.000000 seconds
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
INFO:openai._base_client:Retrying request to /chat/completions in 1.000000 seconds
INFO:httpx:HTTP Request: POST https://api.moonshot.cn/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:backend.app.agents.tools:tools:

name='maps_direction_bicycling' description='骑行路径规划用于规划骑行通勤方案，规划时会考虑天桥、单行线、封路等情况。最大支持 500km 的骑行路线规划' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc8989080>

name='maps_direction_driving' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc8893920>

name='maps_direction_transit_integrated' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经纬度，坐标格式为：经度，纬度'}, 'city': {'type': 'string', 'description': '公共交通规划起点城市'}, 'cityd': {'type': 'string', 'description': '公共交通规划终点城市'}}, 'required': ['origin', 'destination', 'city', 'cityd']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc8893880>

name='maps_direction_walking' description='根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据' args_schema={'type': 'object', 'properties': {'origin': {'type': 'string', 'description': '出发点经度，纬度，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '目的地经度，纬度，坐标格式为：经度，纬度'}}, 'required': ['origin', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc88939c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'type': 'object', 'properties': {'origins': {'type': 'string', 'description': '起点经度，纬度，可以传多个坐标，使用竖线隔离，比如120,30|120,31，坐标格式为：经度，纬度'}, 'destination': {'type': 'string', 'description': '终点经度，纬度，坐标格式为：经度，纬度'}, 'type': {'type': 'string', 'description': '距离测量类型,1代表驾车距离测量，0代表直线距离测量，3步行距离测量'}}, 'required': ['origins', 'destination']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc8893740>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'type': 'object', 'properties': {'address': {'type': 'string', 'description': '待解析的结构化地址信息'}, 'city': {'type': 'string', 'description': '指定查询的城市'}}, 'required': ['address']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc8893b00>

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'type': 'object', 'properties': {'location': {'type': 'string', 'description': '经纬度'}}, 'required': ['location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc8893ce0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'type': 'object', 'properties': {'ip': {'type': 'string', 'description': 'IP地址'}}, 'required': ['ip']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc8f9d940>

name='maps_schema_personal_map' description='用于行程规划结果在高德地图展示。将行程规划位置点按照行程顺序填入lineList，返回结果为高德地图打开的URI链接，该结果不需总结，直接返回！' args_schema={'type': 'object', 'properties': {'orgName': {'type': 'string', 'description': '行程规划地图小程序名称'}, 'lineList': {'type': 'array', 'description': '行程列表', 'items': {'type': 'object', 'properties': {'title': {'type': 'string', 'description': '行程名称描述（按行程顺序）'}, 'pointInfoList': {'type': 'array', 'description': '行程目标位置点描述', 'items': {'type': 'object', 'properties': {'name': {'type': 'string', 'description': '行程目标位置点名称'}, 'lon': {'type': 'number', 'description': '行程目标位置点经度'}, 'lat': {'type': 'number', 'description': '行程目标位置点纬度'}, 'poiId': {'type': 'string', 'description': '行程目标位置点POIID'}}, 'required': ['name', 'lon', 'lat', 'poiId']}}}, 'required': ['title', 'pointInfoList']}}}, 'required': ['orgName', 'lineList']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc8f9d800>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '搜索关键词'}, 'location': {'type': 'string', 'description': '中心点经度纬度'}, 'radius': {'type': 'string', 'description': '搜索半径'}}, 'required': ['keywords', 'location']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc88a8860>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'type': 'object', 'properties': {'id': {'type': 'string', 'description': '关键词搜或者周边搜获取到的POI ID'}}, 'required': ['id']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc88a8900>

name='maps_text_search' description='关键字搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': '查询关键字'}, 'city': {'type': 'string', 'description': '查询城市'}, 'citylimit': {'type': 'boolean', 'default': False, 'description': '是否限制城市范围内搜索，默认不限制'}}, 'required': ['keywords']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc88a8a40>

name='maps_schema_navi' description=' Schema唤醒客户端-导航页面，用于根据用户输入终点信息，返回一个拼装好的客户端唤醒URI，用户点击该URI即可唤起对应的客户端APP。唤起客户端后，会自动跳转到导航页面。' args_schema={'type': 'object', 'properties': {'lon': {'type': 'string', 'description': '终点经度'}, 'lat': {'type': 'string', 'description': '终点纬度'}}, 'required': ['lon', 'lat']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc88a89a0>

name='maps_schema_take_taxi' description='根据用户输入的起点和终点信息，返回一个拼装好的客户端唤醒URI，直接唤起高德地图进行打车。直接展示生成的链接，不需要总结' args_schema={'type': 'object', 'properties': {'slon': {'type': 'string', 'description': '起点经度'}, 'slat': {'type': 'string', 'description': '起点纬度'}, 'sname': {'type': 'string', 'description': '起点名称'}, 'dlon': {'type': 'string', 'description': '终点经度'}, 'dlat': {'type': 'string', 'description': '终点纬度'}, 'dname': {'type': 'string', 'description': '终点名称'}}, 'required': ['dlon', 'dlat', 'dname']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc88a85e0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'type': 'object', 'properties': {'city': {'type': 'string', 'description': '城市名称或者adcode'}}, 'required': ['city']} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x716fc88a82c0>

INFO:httpx:HTTP Request: POST https://api.openai-proxy.org/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai-proxy.org/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-03-26
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://mcp.amap.com/mcp?key=5fed2a5f63f69873d68e7d1d6274c67c "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai-proxy.org/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai-proxy.org/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai-proxy.org/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai-proxy.org/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai-proxy.org/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai-proxy.org/v1/chat/completions "HTTP/1.1 200 OK"
