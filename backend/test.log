INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd4202eca0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bcc20>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bce00>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bcfe0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bcf40>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bcd60>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bcea0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd300>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd3a0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd440>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd4e0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd580>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd620>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd6c0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd760>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7edd420bd800>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef5e6b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef474ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef474cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef474ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef474e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef474c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef474d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef4751c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef475260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef475300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef4753a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef475440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef4754e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef475580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef475620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c7aef4756c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f413eb60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c8ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c8cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c8ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c8e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c8c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c8d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c91c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c9260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c9300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c93a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c9440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c94e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c9580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c9620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7960f41c96c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d60736ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bca40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bcc20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bce00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bcd60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bcb80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bccc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd1c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd3a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd4e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790d607bd620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae7932ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b8a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b8c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b8e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b8d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b8b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b8cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b9120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b91c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b9260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b9300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b93a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b9440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b94e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b9580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72cae79b9620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d343eac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bca40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bcc20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bce00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bcd60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bcb80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bccc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd1c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd3a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd4e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a3d34bd620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e01eac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a4a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a4c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a4e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a4d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a4b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a4cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a5120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a51c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a5260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a5300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a53a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a5440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a54e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a5580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e0a5620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e01f880>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b4e01ed40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b557abce0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b557abc40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b557deb60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b557deac0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b5577a2a0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b55609080>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b55609120>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b556091c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b55609260>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b55609300>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b556093a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b55609440>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b556094e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x790b55609580>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f1132ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b4a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b4c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b4e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b4d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b4b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b4cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b5120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b51c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b5260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b5300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b53a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b5440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b54e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b5580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b43f11b5620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f661eac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a0a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a0c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a0e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a0d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a0b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a0cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a1120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a11c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a1260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a1300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a13a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a1440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a14e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a1580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e12f66a1620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427d2eb60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db0ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db0cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db0ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db0e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db0c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db0d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db11c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db1260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db1300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db13a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db1440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db14e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db1580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db1620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x709427db16c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7a3eac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac4a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac4c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac4e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac4d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac4b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac4cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac5120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac51c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac5260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac5300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac53a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac5440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac54e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac5580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7ac5620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff5a1300>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff19fba0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7a3f880>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715af7a3ed40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff172200>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1caac0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1cb9c0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1fcfe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff5a1440>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1cb920>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1fd080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1fd120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1fd1c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1fd260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1fd300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x715aff1fd3a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x760174742ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c0a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c0c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c0e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c0d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c0b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c0cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c1120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c11c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c1260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c1300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c13a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c1440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c14e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c1580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7601747c1620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017c19d3a0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017c19d440>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x760174742d40>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bdcea20>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bdceac0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bda3c40>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bda3ba0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bc00fe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bd76200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bdcf9c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bc01080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bc01120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bc011c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bc01260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bc01300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76017bc013a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f879e6b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786cae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786ccc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786cea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786ce00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786cc20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786cd60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d1c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d3a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d4e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7d7f8786d6c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f542ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c0a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c0c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c0e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c0d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c0b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c0cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c1120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c11c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c1260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c1300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c13a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c1440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c14e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c1580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f924f5c1620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a23aac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bca40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bcc20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bce00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bcd60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bcb80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bccc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd1c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd3a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd4e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77fb5a2bd620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a94232aac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423aca40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423acc20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ace00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423acd60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423acb80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423accc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad1c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad3a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad4e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x72a9423ad620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcf32ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb4a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb4c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb4e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb4d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb4b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb4cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb5120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb51c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb5260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb5300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb53a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb5440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb54e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb5580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcfb5620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d20498d300>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d20498d440>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d1fcf33880>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d204597c40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d204597ba0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045bea20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045bf9c0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045f0fe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d204566200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045beac0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045f1080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045f1120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045f11c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045f1260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045f1300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79d2045f13a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6d32ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db8a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db8c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db8e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db8d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db8b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db8cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db9120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db91c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db9260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db9300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db93a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db9440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db94e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db9580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6db9620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae38e2a0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6d33880>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204a6d32d40>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae3c3ce0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae3c3c40>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae3f2ac0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae3f3a60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae219080>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae219120>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae2191c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae219260>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae219300>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae2193a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae219440>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae2194e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7204ae219580>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c966732b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b8ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b8cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b8ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b8e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b8c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b8d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b91c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b9260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b9300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b93a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b9440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b94e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b9580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b9620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c9667b96c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58f2ab60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb0ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb0cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb0ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb0e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb0c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb0d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb11c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb1260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb1300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb13a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb1440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb14e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb1580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb1620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58fb16c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58f2b920>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed58f2ade0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed605bbd80>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed605bbce0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed605e7a60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed605e6b60>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed60582340>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d1c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d3a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d4e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bed6040d620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e1152ab60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115acae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115accc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115acea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ace00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115acc20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115acd60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad1c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad3a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad4e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e115ad6c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18f8d3a0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18f8d440>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e1152ade0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18bb6a20>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18bb6ac0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18b8fc40>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18b8fba0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18be8fe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18b5e200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18bb79c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18be9080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18be9120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18be91c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18be9260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18be9300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f2e18be93a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593b32b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb8ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb8cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb8ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb8e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb8c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb8d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb91c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb9260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb9300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb93a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb9440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb94e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb9580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb9620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x747593bb96c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdea26c00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaacb80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaacd60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaacf40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaacea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaaccc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaace00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad3a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad4e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad6c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70efdeaad760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f546732c00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b8b80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b8d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b8f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b8ea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b8cc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b8e00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b9260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b9300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b93a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b9440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b94e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b9580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b9620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b96c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467b9760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54e1cd4e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54ddbbd80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f5467339c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f546732e80>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dd8a3e0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54ddeaca0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54ddebba0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc191c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc19260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc19300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc193a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc19440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc194e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc19580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc19620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79f54dc196c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e73ec00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c4b80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c4d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c4f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c4ea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c4cc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c4e00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c5260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c5300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c53a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c5440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c54e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c5580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c5620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c56c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x79ac6e7c5760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171d32c00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db8b80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db8d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db8f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db8ea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db8cc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db8e00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db9260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db9300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db93a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db9440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db94e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db9580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db9620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db96c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171db9760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f41797cd4e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f41793c7d80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171d339c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4171d32e80>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f417938e3e0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f41793eeca0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f41793efba0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f41792191c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4179219260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4179219300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f41792193a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4179219440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f41792194e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4179219580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f4179219620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f41792196c0>

INFO:openai._base_client:Retrying request to /chat/completions in 0.401855 seconds
INFO:openai._base_client:Retrying request to /chat/completions in 0.860460 seconds
INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab605e6ca0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60474c20>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60474e00>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60474fe0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60474f40>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60474d60>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60474ea0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60475300>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab604753a0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60475440>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab604754e0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60475580>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60475620>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab604756c0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60475760>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7dab60475800>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1db26ca0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb0c20>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb0e00>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb0fe0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb0f40>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb0d60>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb0ea0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb1300>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb13a0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb1440>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb14e0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb1580>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb1620>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb16c0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb1760>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70fa1dbb1800>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44d36b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db8ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db8cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db8ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db8e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db8c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db8d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db91c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db9260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db9300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db93a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db9440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db94e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db9580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db9620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x772d44db96c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726e36ca0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec0c20>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec0e00>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec0fe0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec0f40>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec0d60>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec0ea0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec1300>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec13a0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec1440>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec14e0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec1580>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec1620>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec16c0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec1760>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b0726ec1800>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe6232c00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b8b80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b8d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b8f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b8ea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b8cc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b8e00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b9260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b9300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b93a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b9440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b94e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b9580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b9620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b96c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62b9760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62968e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed9bbe20>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe62339c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fe6232e80>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed9eaca0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed9eac00>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed98a3e0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed8151c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed815260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed815300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed8153a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed815440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed8154e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed815580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed815620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7e1fed8156c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201d36c00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc0b80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc0d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc0f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc0ea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc0cc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc0e00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc1260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc1300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc13a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc1440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc14e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc1580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc1620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc16c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x739201dc1760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4613ec00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461ccb80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461ccd60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461ccf40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461ccea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cccc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cce00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd3a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd4e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd6c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d461cd760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4dbbdee0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4dbbdf80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4dbbde40>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4613ee80>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d7df600>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d751260>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d6044a0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d605bc0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d605c60>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d605d00>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d605da0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d605e40>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d605ee0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d605f80>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d606020>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x778d4d6060c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274403eb60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c4ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c4cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c4ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c4e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c4c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c4d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c51c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c5260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c5300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c53a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c5440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c54e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c5580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c5620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a27440c56c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274bb9d440>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274bb9d3a0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274403f920>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274403ede0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7cb9c0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7caac0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7762a0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7fd080>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274bb9d4e0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7cba60>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7fd120>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7fd1c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7fd260>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7fd300>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7fd3a0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a274b7fd440>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a43ab60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c0ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c0cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c0ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c0e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c0c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c0d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c11c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c1260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c1300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c13a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c1440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c14e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c1580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c1620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a4c16c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91f993a0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91f99300>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a43ade0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f8a43b920>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bc6a20>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bc6ac0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91b9fba0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bf8fe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91b6e200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bc7920>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bf9080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bf9120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bf91c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bf9260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bf9300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x755f91bf93a0>

INFO:openai._base_client:Retrying request to /chat/completions in 0.498655 seconds
INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed036c00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c0b80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c0d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c0f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c0ea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c0cc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c0e00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c1260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c1300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c13a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c1440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c14e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c1580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c1620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c16c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0c1760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f4b99440>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f4b99580>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77ed0379c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f479bd80>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f479bce0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47cab60>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47cbb00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47f9120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f476a340>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47cba60>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47f91c0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47f9260>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47f9300>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47f93a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47f9440>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7c77f47f94e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80632ec00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b4b80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b4d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b4f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b4ea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b4cc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b4e00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b5260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b5300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b53a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b5440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b54e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b5580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b5620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b56c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb8063b5760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80dd91440>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80dd914e0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80632ee80>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9c2ac0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9c2b60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d993ce0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d993c40>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9f1080>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9622a0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9c3a60>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9f1120>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9f11c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9f1260>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9f1300>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9f13a0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bb80d9f1440>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc821626b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216acae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216accc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216acea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ace00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216acc20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216acd60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad1c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad3a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad4e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc8216ad6c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8ed2b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d60ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d60cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d60ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d60e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d60c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d60d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d611c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d61260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d61300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d613a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d61440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d614e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d61580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d61620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7adeb8d616c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a52ec00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bcb80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bcd60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bcf40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bcea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bccc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bce00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd3a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd4e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd6c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a5bd760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331f99440>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a52f9c0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f532a52ee80>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331b93ce0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331b93d80>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bc2b60>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331b62340>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bf1120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331f99580>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bc3b00>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bf11c0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bf1260>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bf1300>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bf13a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bf1440>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5331bf14e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59db2ab60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb4ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb4cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb4ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb4e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb4c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb4d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb51c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb5260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb5300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb53a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb5440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb54e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb5580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb5620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d59dbb56c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a558d440>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a558d3a0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a515e2a0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a518bc40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a518bce0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51b6ac0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51b7a60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51e9080>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a558d4e0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51b6b60>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51e9120>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51e91c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51e9260>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51e9300>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51e93a0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70d5a51e9440>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef0732c00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b8b80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b8d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b8f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b8ea0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b8cc0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b8e00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b9260>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b9300>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b93a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b9440>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b94e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b9580>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b9620>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b96c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef07b9760>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef81aa020>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef81aa160>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7dc8900>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7dc8f40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7dcb7e0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7d41440>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df1da0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df07c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df1e40>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df1ee0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df1f80>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df2020>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df20c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df2160>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df2200>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x703ef7df22a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f342b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c8ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c8cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c8ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c8e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c8c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c8d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c91c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c9260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c9300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c93a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c9440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c94e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c9580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c9620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71135f3c96c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece670d2ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5ca40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5cc20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5ce00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5cd60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5cb80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5ccc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d1c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d3a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d4e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f5d620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece66f3a7a0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece670d2d40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece670d3880>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e562a20>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e562ac0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e537c40>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e537ba0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e594fe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e50a200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e563920>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e595080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e595120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e5951c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e595260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e595300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7ece6e5953a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bce32b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb8ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb8cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb8ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb8e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb8c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb8d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb91c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb9260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb9300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb93a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb9440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb94e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb9580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb9620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bceb96c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c4999300>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c4999440>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234bce33920>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c4597c40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c4597ba0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45c6a20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45c79c0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45f4fe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c4566200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45c7920>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45f5080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45f5120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45f51c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45f5260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45f5300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7234c45f53a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739d2eb60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db4ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db4cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db4ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db4e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db4c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db4d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db51c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db5260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db5300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db53a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db5440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db54e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db5580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db5620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7aa739db56c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b8126b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81acae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81accc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81acea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ace00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81acc20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81acd60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad1c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad3a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad4e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b81ad6c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bfb893a0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bfb894e0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4b8126de0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7baac0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7bb9c0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf78bce0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf78bc40>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7e9080>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf75a2a0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7bba60>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7e9120>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7e91c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7e9260>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7e9300>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7e93a0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x77b4bf7e9440>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708e1aac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea4a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea4c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea4e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea4d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea4b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea4cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea5120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea51c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea5260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea5300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea53a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea5440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea54e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea5580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x769708ea5620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d5132eac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b4a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b4c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b4e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b4d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b4b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b4cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b5120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b51c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b5260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b5300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b53a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b5440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b54e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b5580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a3d513b5620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e9846a20>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cc9a0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98ccb80>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98ccd60>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cccc0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98ccae0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98ccc20>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd080>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd120>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd1c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd260>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd300>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd3a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd440>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd4e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7455e98cd580>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c52eb60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b0ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b0cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b0ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b0e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b0c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b0d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b11c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b1260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b1300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b13a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b1440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b14e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b1580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b1620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c5b16c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63f95300>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63f95440>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc5c52f920>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63b93c40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63b93ba0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bc2a20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bc39c0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bf0fe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63b62200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bc2ac0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bf1080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bf1120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bf11c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bf1260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bf1300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x75cc63bf13a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f436ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b8a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b8c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b8e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b8d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b8b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b8cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b9120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b91c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b9260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b9300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b93a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b9440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b94e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b9580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f4b9620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096f953a0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096f95300>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f437880>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f508f436d40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bc3920>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bc2ac0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096b97ba0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bf4fe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096b6a200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bc39c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bf5080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bf5120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bf51c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bf5260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bf5300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7f5096bf53a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ff3eb60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc0ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc0cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc0ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc0e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc0c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc0d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc11c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc1260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc1300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc13a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc1440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc14e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc1580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc1620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x799f6ffc16c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c07732ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b4a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b4c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b4e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b4d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b4b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b4cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b5120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b51c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b5260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b5300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b53a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b5440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b54e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b5580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c077b5620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0f191300>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0f191260>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c07732d40>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c07733880>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edbe980>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edbea20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0ed93b00>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edf0f40>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0ed66160>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edbf880>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edf0fe0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edf1080>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edf1120>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edf11c0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edf1260>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a8c0edf1300>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e7943eac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c0a40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c0c20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c0e00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c0d60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c0b80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c0cc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c1120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c11c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c1260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c1300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c13a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c1440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c14e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c1580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e794c1620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80f9d300>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80f9d440>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e7943f880>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80b9fc40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80b9fba0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bcaa20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bcb9c0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bfcfe0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80b72200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bcaac0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bfd080>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bfd120>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bfd1c0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bfd260>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bfd300>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7b8e80bfd3a0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c32eb60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b8ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b8cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b8ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b8e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b8c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b8d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b91c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b9260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b9300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b93a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b9440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b94e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b9580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b9620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bc50c3b96c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8f2eb60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb8ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb8cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb8ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb8e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb8c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb8d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb91c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb9260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb9300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb93a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb9440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb94e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb9580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb9620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb96c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8fb9760>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8f2ede0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7525f8f2f920>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005c2ac0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005c2b60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x752600593ce0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x752600593c40>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005f1080>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005622a0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005c39c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005f1120>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005f11c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005f1260>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005f1300>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005f13a0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7526005f1440>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f69226b60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b0ae0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b0cc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b0ea0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b0e00>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b0c20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b0d60>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b11c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b1260>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b1300>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b13a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b1440>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b14e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b1580>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b1620>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x721f692b16c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x775484142ac0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cca40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841ccc20>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cce00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841ccd60>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841ccb80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cccc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd120>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd1c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd260>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd300>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd3a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd440>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd4e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd580>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7754841cd620>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33fb1580>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e17920>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e17b00>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e17ce0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e17c40>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e17a60>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e17ba0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e48040>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e480e0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e48180>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e48220>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e482c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e48360>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e48400>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e484a0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x776a33e48540>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662f37b00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd5ee0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd60c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd62a0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6200>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6020>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6160>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd65c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6660>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6700>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd67a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6840>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd68e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6980>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6a20>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x70c662fd6ac0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2dda2fb00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddacdee0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace0c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace2a0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace200>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace020>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace160>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace5c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace660>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace700>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace7a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace840>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace8e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddace980>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddacea20>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2ddaceac0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2dda8b7e0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e53ae520>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4fadbc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4fcce00>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4fcfce0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4f49da0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa200>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ff8c20>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa2a0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa340>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa3e0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa480>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa520>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa5c0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa660>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x76c2e4ffa700>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e243b00>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e1ee0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e20c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e22a0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2200>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2020>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2160>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e25c0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2660>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2700>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e27a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2840>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e28e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2980>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2a20>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d22e2e2ac0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d235bcb240>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d235bcb380>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d2357f1bc0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d2357f1b20>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d2356149a0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d2356158a0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d235616fc0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d2356159e0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d235617060>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d235617100>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d2356171a0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d235617240>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d2356172e0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d235617380>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d235617420>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x71d2356174c0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd03fa60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e1e40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2020>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2200>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2160>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e1f80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e20c0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2520>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e25c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2660>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2700>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e27a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2840>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e28e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2980>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7629bd0e2a20>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a333a60>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d1e40>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2020>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2200>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2160>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d1f80>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d20c0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2520>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d25c0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2660>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2700>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d27a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2840>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d28e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2980>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a3d2a20>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x746571dae480>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x746571dae5c0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719d0d60>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a38ca40>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x74656a333ce0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719adb20>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe160>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fcb80>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe200>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe2a0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe340>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe3e0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe480>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe520>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe5c0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7465719fe660>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7b787c0>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcab60>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcad40>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcaf20>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcae80>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcaca0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcade0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb240>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb2e0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb380>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb420>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb4c0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb560>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb600>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb6a0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7bcb740>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf5a7100>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf5a7240>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240c7b79580>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1cda80>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1cd9e0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1ec860>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1eede0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1ed800>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1eee80>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1eef20>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1eefc0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1ef060>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1ef100>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1ef1a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1ef240>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7240cf1ef2e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad894860>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e2c00>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e2de0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e2fc0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e2f20>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e2d40>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e2e80>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e32e0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e3380>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e3420>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e34c0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e3560>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e3600>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e36a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e3740>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad8e37e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4de5a80>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b51bf240>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b51bf1a0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad894ae0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141ad895620>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0c900>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0c9a0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0ee80>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0ef20>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0efc0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0f060>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0f100>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0f1a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0f240>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0f2e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7141b4c0f380>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3f8c860>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdac00>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdade0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdafc0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdaf20>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdad40>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdae80>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb2e0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb380>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb420>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb4c0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb560>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb600>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb6a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb740>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3fdb7e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab9b7240>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab9b72e0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281a3f8cae0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab5ddb20>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab5dda80>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab404900>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab4049a0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab406e80>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab406f20>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab406fc0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab407060>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab407100>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab4071a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab407240>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab4072e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7281ab407380>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffa98860>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae6c00>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae6de0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae6fc0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae6f20>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae6d40>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae6e80>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae72e0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae7380>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae7420>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae74c0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae7560>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae7600>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae76a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae7740>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7069ffae77e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cf8c900>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdaca0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdae80>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb060>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdafc0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdade0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdaf20>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb380>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb420>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb4c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb560>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb600>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb6a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb740>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb7e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb880>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cfdb920>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cf8cb80>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb6cf8d6c0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745ddbc0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745ddb20>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745f89a0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745faf20>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745f9940>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745fafc0>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745fb060>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745fb100>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745fb1a0>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745fb240>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745fb2e0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745fb380>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7abb745fb420>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993a4860>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993eec00>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993eede0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993eefc0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993eef20>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993eed40>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993eee80>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef2e0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef380>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef420>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef4c0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef560>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef600>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef6a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef740>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993ef7e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79992bf240>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79992bf2e0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79993a4ae0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0af5b20>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0af5a80>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0914900>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a09149a0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0916e80>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0916f20>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0916fc0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0917060>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0917100>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a09171a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0917240>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a09172e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7a79a0917380>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe44900>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe92ca0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe92e80>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe93060>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe92fc0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe92de0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe92f20>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe93380>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe93420>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe934c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe93560>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe93600>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe936a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe93740>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe937e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe93880>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c759e700>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c79765c0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c7977ec0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3bfe44b80>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75ca480>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75c9580>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75ca3e0>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75cbba0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75cbc40>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75cbce0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75cbd80>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75cbe20>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75cbec0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c75cbf60>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c7414040>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x7bf3c74140e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54e98860>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee2c00>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee2de0>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee2fc0>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee2f20>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee2d40>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee2e80>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee32e0>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee3380>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee3420>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee34c0>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee3560>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee3600>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee36a0>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee3740>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x774f54ee37e0>

INFO:app.agents.tools:tools:

name='maps_regeocode' description='将一个高德经纬度坐标转换为行政区划地址信息' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_regeocodeArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677e94900>

name='maps_geo' description='将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标' args_schema={'properties': {'address': {'title': 'Address', 'type': 'string'}, 'city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'City'}}, 'required': ['address'], 'title': 'maps_geoArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee2ca0>

name='maps_ip_location' description='IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置' args_schema={'properties': {'ip': {'title': 'Ip', 'type': 'string'}}, 'required': ['ip'], 'title': 'maps_ip_locationArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee2e80>

name='maps_weather' description='根据城市名称或者标准adcode查询指定城市的天气' args_schema={'properties': {'city': {'title': 'City', 'type': 'string'}}, 'required': ['city'], 'title': 'maps_weatherArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee3060>

name='maps_bicycling_by_address' description='Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_bicycling_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee2fc0>

name='maps_bicycling_by_coordinates' description='Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        destination_coordinates (str): Ending point coordinates in the format "longitude,latitude" (e.g. "116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n    ' args_schema={'properties': {'origin_coordinates': {'title': 'Origin Coordinates', 'type': 'string'}, 'destination_coordinates': {'title': 'Destination Coordinates', 'type': 'string'}}, 'required': ['origin_coordinates', 'destination_coordinates'], 'title': 'maps_bicycling_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee2de0>

name='maps_direction_walking_by_address' description='Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_walking_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee2f20>

name='maps_direction_walking_by_coordinates' description='步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_walking_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee3380>

name='maps_direction_driving_by_address' description='Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Origin City'}, 'destination_city': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Destination City'}}, 'required': ['origin_address', 'destination_address'], 'title': 'maps_direction_driving_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee3420>

name='maps_direction_driving_by_coordinates' description='驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}}, 'required': ['origin', 'destination'], 'title': 'maps_direction_driving_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee34c0>

name='maps_direction_transit_integrated_by_address' description='Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it\'s recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. "北京市朝阳区阜通东大街6号")\n        destination_address (str): Ending point address (e.g. "北京市海淀区上地十街10号")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n    ' args_schema={'properties': {'origin_address': {'title': 'Origin Address', 'type': 'string'}, 'destination_address': {'title': 'Destination Address', 'type': 'string'}, 'origin_city': {'title': 'Origin City', 'type': 'string'}, 'destination_city': {'title': 'Destination City', 'type': 'string'}}, 'required': ['origin_address', 'destination_address', 'origin_city', 'destination_city'], 'title': 'maps_direction_transit_integrated_by_addressArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee3560>

name='maps_direction_transit_integrated_by_coordinates' description='根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        destination (str): 终点经纬度坐标，格式为"经度,纬度" (例如："116.434307,39.90909")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n    ' args_schema={'properties': {'origin': {'title': 'Origin', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'city': {'title': 'City', 'type': 'string'}, 'cityd': {'title': 'Cityd', 'type': 'string'}}, 'required': ['origin', 'destination', 'city', 'cityd'], 'title': 'maps_direction_transit_integrated_by_coordinatesArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee3600>

name='maps_distance' description='测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量' args_schema={'properties': {'origins': {'title': 'Origins', 'type': 'string'}, 'destination': {'title': 'Destination', 'type': 'string'}, 'type': {'default': '1', 'title': 'Type', 'type': 'string'}}, 'required': ['origins', 'destination'], 'title': 'maps_distanceArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee36a0>

name='maps_text_search' description='关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息' args_schema={'properties': {'keywords': {'title': 'Keywords', 'type': 'string'}, 'city': {'default': '', 'title': 'City', 'type': 'string'}, 'citylimit': {'default': 'false', 'title': 'Citylimit', 'type': 'string'}}, 'required': ['keywords'], 'title': 'maps_text_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee3740>

name='maps_around_search' description='周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI' args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'radius': {'default': '1000', 'title': 'Radius', 'type': 'string'}, 'keywords': {'default': '', 'title': 'Keywords', 'type': 'string'}}, 'required': ['location'], 'title': 'maps_around_searchArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee37e0>

name='maps_search_detail' description='查询关键词搜或者周边搜获取到的POI ID的详细信息' args_schema={'properties': {'id': {'title': 'Id', 'type': 'string'}}, 'required': ['id'], 'title': 'maps_search_detailArguments', 'type': 'object'} response_format='content_and_artifact' coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x702677ee3880>

